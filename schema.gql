schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

directive @ifAllowed on FIELD

"""
Indicates that an Input Object is a OneOf Input Object (and thus requires
                        exactly one of its field be provided)
"""
directive @oneOf on INPUT_OBJECT

enum Action {
  ACCEPT_EVENT_INVITE
  ADD_COMPETITION_MEMBER
  ADD_EVENT_COMPETITION
  ADD_EVENT_MEMBER
  AWARD_BADGE
  CREATE_COMMENT
  CREATE_COMPETITION
  CREATE_COMPETITION_RULE_AGREEMENT
  CREATE_EVENT
  CREATE_EVENT_RULE_AGREEMENT
  CREATE_FORUM
  CREATE_ORGANIZATION
  CREATE_PROJECT_VERSION_APPROVAL
  CREATE_SUBJECT_SUBSCRIPTION
  CREATE_SUBMISSION_VERSION
  CREATE_TAG
  CREATE_TOPIC
  CREATE_USE_CASE_VERSION
  DELETE_COMMENT
  DELETE_COMPETITION
  DELETE_EVENT
  DELETE_FORUM
  DELETE_ORGANIZATION
  DELETE_PROJECT_VERSION_APPROVAL
  DELETE_SUBJECT_SUBSCRIPTION
  DELETE_TAG
  DELETE_TOPIC
  DELETE_USER
  FETCH_WEBSITE_METADATA
  JOIN_COMPETITION
  JOIN_EVENT
  MANAGE_EVENT_INVITE_CODE
  PUBLISH_VOTE
  READ_ACTIVITY_TRACKER
  READ_COMMENT
  READ_COMPETITION
  READ_COMPETITION_MEMBERSHIP
  READ_COMPETITION_RULE
  READ_COMPETITION_RULE_AGREEMENT
  READ_EVENT
  READ_EVENT_COMPETITION
  READ_EVENT_MEMBERSHIP
  READ_EVENT_RULE
  READ_EVENT_RULE_AGREEMENT
  READ_PROJECT_VERSION
  READ_PROJECT_VERSION_APPROVAL
  READ_PROJECT_VERSION_EVALUATION
  READ_PROJECT_VERSION_FILE
  READ_SUBJECT_SUBSCRIPTION
  READ_TOPIC
  READ_USER_EMAIL
  READ_USER_NOTIFICATIONS
  READ_USER_PERMISSIONS
  REMOVE_COMPETITION_MEMBER
  REMOVE_EVENT_COMPETITION
  REMOVE_EVENT_MEMBER
  REMOVE_ORGANIZATION_MEMBER
  SET_COMPETITION_ORDERING_PRIORITY
  TRANSFER_COMPETITION_OWNERSHIP
  TRANSFER_EVENT_OWNERSHIP
  TRANSFER_ORGANIZATION_OWNERSHIP
  UPDATE_AGENDA
  UPDATE_COMMENT
  UPDATE_COMPETITION
  UPDATE_COMPETITION_ACCESS
  UPDATE_EVENT
  UPDATE_FORUM
  UPDATE_ORGANIZATION
  UPDATE_ORGANIZATION_MEMBERSHIP
  UPDATE_PROJECT_VERSION
  UPDATE_PROJECT_VERSION_FILE
  UPDATE_TOPIC
  UPDATE_USER
  UPLOAD_FILES
}

type Activity {
  date: NaiveDate!
  level: Int!
  points: Int!
}

type ActivityConnection {
  """A list of edges."""
  edges: [ActivityEdge!]!
  """A list of nodes."""
  nodes: [Activity!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type ActivityEdge {
  """A cursor for use in pagination"""
  cursor: String!
  """The item at the end of the edge"""
  node: Activity!
}

enum ActivityVisibility {
  """Activity is visible by every authenticated user."""
  AUTHENTICATED
  """Activity is only visible to invited members."""
  MEMBERS
  """Activity is visible by everyone, even unauthenticated users."""
  UNAUTHENTICATED
}

enum ArchiveKind {
  TAR
  ZIP
}

enum Badge {
  """BIG Quantum Hackathon by QuantX, October 2021, Paris (FR)"""
  BIG_PARIS_2021
  """BIG Quantum Hackathon by the Chicago Quantum Exchange & QuantX, Sept 2023, Chicago (USA)"""
  CHICAGO_2023
  """Quantum Hackathon by QuantX, October 2022, Grenoble (FR)"""
  GRENOBLE_2022
  """Clinical Trial Optimization Competition 2024 by Ingenii First Prize"""
  INGENII_2024_FIRST
  """Clinical Trial Optimization Competition 2024 by Ingenii Participant"""
  INGENII_2024_OTHERS
  """Clinical Trial Optimization Competition 2024 by Ingenii Second Prize"""
  INGENII_2024_SECOND
  """Clinical Trial Optimization Competition 2024 by Ingenii Special Prize"""
  INGENII_2024_SPECIAL
  """Clinical Trial Optimization Competition 2024 by Ingenii Third Prize"""
  INGENII_2024_THIRD
  """Quantum Hackathon by Qu√©bec Quantique & QuantX, June 2022, Montreal (CAN)"""
  MONTREAL_2022
  """Quantum hackathon by QuantX, March 2021, Paris (FR)"""
  PARIS_2021
  """BIG QC-AI-HPC Hackathon by QuantX, March 2023, Paris (FR)"""
  PARIS_2023
  """BIG Quantum Hackathon Sports Edition by QuantX & Aqora, May 2024, Paris (FR)"""
  PARIS_2024_HACKERS
  """BIG Quantum Hackathon Sports Edition by QuantX & Aqora, May 2024, Paris (FR)"""
  PARIS_2024_WINNERS
  """Hackathon Trailblazer - 3rd Place Team - Q2B Silicon Valley 2024"""
  Q2B2024_BRONZE
  """Hackathon Champion - Q2B Silicon Valley 2024"""
  Q2B2024_GOLD
  """On-Site Participant - Q2B Hackathon 2024"""
  Q2B2024_ONSITE
  """Global Participant - Q2B Hackathon 2024"""
  Q2B2024_REMOTE
  """Hackathon Innovator - 2nd Place Team - Q2B Silicon Valley 2024"""
  Q2B2024_SILVER
  """Badge awarded upon first submission"""
  QUANTUM_PIONEER
  TEST
  """ICTP - Quantinuum Quantum Hackathon, April 2023, Trieste (IT)"""
  TRIESTE_2023
}

type Comment implements Node & Votable {
  author: User!
  children(after: String, before: String, first: Int, last: Int, order: VotableOrder): CommentConnection!
  content: String!
  createdAt: DateTime!
  edited: Boolean!
  id: ID!
  numChildren: Int!
  parent: Comment
  topic: Topic!
  viewerCan(action: Action!, asEntity: UsernameOrID): Boolean!
  voted: EntityVote
  votes: Int!
}

type CommentConnection {
  """A list of edges."""
  edges: [CommentEdge!]!
  """A list of nodes."""
  nodes: [Comment!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type CommentEdge {
  """A cursor for use in pagination"""
  cursor: String!
  hotness: Float!
  """The item at the end of the edge"""
  node: Comment!
}

type Competition implements ForumOwner & Node {
  banner: Url
  createdAt: DateTime!
  description: String
  entityRuleAgreements(after: String, before: String, entity: UsernameOrID, first: Int, last: Int, latest: Boolean): CompetitionRuleAgreementConnection!
  forum: Forum!
  grantHostSubmissionAccess: Boolean!
  hasLeaderboard: Boolean!
  host: Entity!
  id: ID!
  isPrivate: Boolean!
  latestRule: CompetitionRule!
  leaderboard(after: String, before: String, first: Int, last: Int): ProjectVersionEvaluationConnection!
  leaderboardSize: Int!
  members(after: String, before: String, first: Int, last: Int): CompetitionMembershipConnection!
  membership(entity: UsernameOrID): CompetitionMembership
  requiresApproval: Boolean!
  rules(after: String, before: String, first: Int, last: Int): CompetitionRuleConnection!
  shortDescription: String!
  slug: String!
  submission(entity: UsernameOrID): Submission
  submissions(after: String, before: String, entityId: ID, first: Int, last: Int, needsApproval: Boolean): SubmissionConnection!
  tags(after: String, before: String, first: Int, last: Int): CompetitionTagConnection!
  thumbnail: Url
  title: String!
  useCase: UseCase!
  viewerCan(action: Action!, asEntity: UsernameOrID): Boolean!
  visibility: ActivityVisibility!
}

type CompetitionConnection {
  """A list of edges."""
  edges: [CompetitionEdge!]!
  """A list of nodes."""
  nodes: [Competition!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type CompetitionEdge {
  """A cursor for use in pagination"""
  cursor: String!
  """The item at the end of the edge"""
  node: Competition!
}

type CompetitionMembership implements Node {
  competition: Competition!
  entity: Entity!
  id: ID!
  kind: CompetitionMembershipKind!
  ruleAgreements(after: String, before: String, first: Int, last: Int, latest: Boolean): CompetitionRuleAgreementConnection!
  viewerCan(action: Action!, asEntity: UsernameOrID): Boolean!
}

type CompetitionMembershipConnection {
  """A list of edges."""
  edges: [CompetitionMembershipEdge!]!
  """A list of nodes."""
  nodes: [CompetitionMembership!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type CompetitionMembershipEdge {
  """A cursor for use in pagination"""
  cursor: String!
  """The item at the end of the edge"""
  node: CompetitionMembership!
}

enum CompetitionMembershipKind {
  HOST
  PARTICIPANT
}

type CompetitionRule implements Node {
  competition: Competition!
  createdAt: DateTime!
  entityAgreement(entity: UsernameOrID): CompetitionRuleAgreement
  id: ID!
  text: String!
}

type CompetitionRuleAgreement implements Node {
  competitionRule: CompetitionRule!
  createdAt: DateTime!
  entity: Entity!
  id: ID!
}

type CompetitionRuleAgreementConnection {
  """A list of edges."""
  edges: [CompetitionRuleAgreementEdge!]!
  """A list of nodes."""
  nodes: [CompetitionRuleAgreement!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type CompetitionRuleAgreementEdge {
  """A cursor for use in pagination"""
  cursor: String!
  """The item at the end of the edge"""
  node: CompetitionRuleAgreement!
}

type CompetitionRuleConnection {
  """A list of edges."""
  edges: [CompetitionRuleEdge!]!
  """A list of nodes."""
  nodes: [CompetitionRule!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type CompetitionRuleEdge {
  """A cursor for use in pagination"""
  cursor: String!
  """The item at the end of the edge"""
  node: CompetitionRule!
}

type CompetitionTagConnection {
  """A list of edges."""
  edges: [TagEdge!]!
  """A list of nodes."""
  nodes: [Tag!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

input CreateCommentInput {
  content: String!
}

input CreateCompetitionInput {
  banner: Upload
  description: String
  grantHostSubmissionAccess: Boolean
  hasLeaderboard: Boolean
  requiresApproval: Boolean
  shortDescription: String!
  slug: String!
  tagIds: [ID]
  thumbnail: Upload
  title: String!
  visibility: ActivityVisibility! = UNAUTHENTICATED
}

input CreateEventInput {
  banner: Upload
  description: String
  shortDescription: String!
  slug: String!
  thumbnail: Upload
  title: String!
  visibility: ActivityVisibility! = UNAUTHENTICATED
}

input CreateForumInput {
  description: String
  guidelines: String
  icon: Upload
  orderingPriority: Int
  shortDescription: String!
  slug: String!
  title: String!
}

type CreateMultipartUploadResponse {
  uploadId: String!
  urls: [Url!]!
}

input CreateOrganizationInput {
  bio: String
  displayName: String!
  github: String
  image: Upload
  linkedin: String
  location: String
  username: String!
  website: Url
}

input CreatePasswordResetInput {
  usernameOrEmail: String!
}

input CreateTagInput {
  name: String!
}

input CreateTopicInput {
  description: String
  title: String!
  url: Url
}

"""
Implement the DateTime<FixedOffset> scalar

The input/output is a string in RFC3339 format.
"""
scalar DateTime

type DeletedComment {
  commentId: ID!
  parentId: ID
  topicId: ID!
}

interface Entity {
  badges(after: String, before: String, first: Int, last: Int): EntityBadgeConnection!
  bio: String
  createdAt: DateTime!
  displayName: String!
  github: String
  id: ID!
  image: Url
  imageThumbnail: Url
  kind: EntityKind!
  linkedin: String
  location: String
  points: Int!
  projectVersionApprovals(after: String, before: String, first: Int, last: Int, projectVersionId: UUID): ProjectVersionApprovalConnection!
  rank: Int!
  subjectSubscriptions(after: String, before: String, first: Int, kinds: [SubjectKind!], last: Int): SubjectSubscriptionConnection!
  submissions(after: String, before: String, competitionId: ID, first: Int, last: Int): SubmissionConnection!
  username: String!
  viewerCan(action: Action!, asEntity: UsernameOrID): Boolean!
  website: String
}

enum EntityActivitiesConnectionKind {
  COMMENT
  SUBMISSION
  TOPIC
}

type EntityBadge implements Node {
  badge: Badge!
  createdAt: DateTime!
  id: ID!
}

type EntityBadgeConnection {
  """A list of edges."""
  edges: [EntityBadgeEdge!]!
  """A list of nodes."""
  nodes: [EntityBadge!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type EntityBadgeEdge {
  """A cursor for use in pagination"""
  cursor: String!
  """The item at the end of the edge"""
  node: EntityBadge!
}

type EntityConnection {
  """A list of edges."""
  edges: [EntityEdge!]!
  """A list of nodes."""
  nodes: [Entity!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type EntityEdge {
  """A cursor for use in pagination"""
  cursor: String!
  """The item at the end of the edge"""
  node: Entity!
}

enum EntityKind {
  ORGANIZATION
  USER
}

type EntityVote {
  score: Int!
  subject: VotableEdge!
  votedAt: DateTime!
}

type Event implements ForumOwner & Node {
  agenda: JSON
  banner: Url
  competitions(after: String, before: String, first: Int, last: Int): EventCompetitionConnection!
  createdAt: DateTime!
  description: String
  entityRuleAgreements(after: String, before: String, entity: UsernameOrID, first: Int, last: Int, latest: Boolean): EventRuleAgreementConnection!
  forum: Forum!
  host: Entity!
  id: ID!
  invitations(after: String, before: String, first: Int, last: Int): EventInvitationConnection!
  invitationsCount: Int!
  invite: EventInvite!
  isPrivate: Boolean!
  latestRule: EventRule!
  members(after: String, before: String, first: Int, last: Int): EventMembershipConnection!
  membership(entity: UsernameOrID): EventMembership
  rules(after: String, before: String, first: Int, last: Int): EventRuleConnection!
  shortDescription: String!
  slug: String!
  teams(after: String, before: String, first: Int, last: Int): OrganizationConnection!
  thumbnail: Url
  title: String!
  viewerCan(action: Action!, asEntity: UsernameOrID): Boolean!
  visibility: ActivityVisibility!
}

type EventCompetition implements Node {
  competition: Competition!
  event: Event!
  id: ID!
  viewerCan(action: Action!, asEntity: UsernameOrID): Boolean!
}

type EventCompetitionConnection {
  """A list of edges."""
  edges: [EventCompetitionEdge!]!
  """A list of nodes."""
  nodes: [EventCompetition!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type EventCompetitionEdge {
  """A cursor for use in pagination"""
  cursor: String!
  """The item at the end of the edge"""
  node: EventCompetition!
}

type EventConnection {
  """A list of edges."""
  edges: [EventEdge!]!
  """A list of nodes."""
  nodes: [Event!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type EventEdge {
  """A cursor for use in pagination"""
  cursor: String!
  """The item at the end of the edge"""
  node: Event!
}

type EventInvitation implements Node {
  email: String!
  event: Event!
  id: ID!
  organization: Organization
  registeredAs: User
  username: String
}

type EventInvitationConnection {
  """A list of edges."""
  edges: [EventInvitationEdge!]!
  """A list of nodes."""
  nodes: [EventInvitation!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type EventInvitationEdge {
  """A cursor for use in pagination"""
  cursor: String!
  """The item at the end of the edge"""
  node: EventInvitation!
}

type EventInvite implements Node {
  code: String
  event: Event!
  id: ID!
  latestRuleText: String!
  shortDescription: String!
  thumbnail: Url
  title: String!
  viewerCan(action: Action!, asEntity: UsernameOrID): Boolean!
}

input EventMemberInvite {
  """Required email used to find registered members, or send invitation email otherwise."""
  email: String!
  """Optional team name used to create teams for the event."""
  team: String
  """Optional username used to send invitation email when the member has not registered yet."""
  username: String
}

type EventMembership implements Node {
  entity: Entity!
  event: Event!
  id: ID!
  kind: EventMembershipKind!
  ruleAgreements(after: String, before: String, first: Int, last: Int, latest: Boolean): EventRuleAgreementConnection!
  viewerCan(action: Action!, asEntity: UsernameOrID): Boolean!
}

type EventMembershipConnection {
  """A list of edges."""
  edges: [EventMembershipEdge!]!
  """A list of nodes."""
  nodes: [EventMembership!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type EventMembershipEdge {
  """A cursor for use in pagination"""
  cursor: String!
  """The item at the end of the edge"""
  node: EventMembership!
}

enum EventMembershipKind {
  HOST
  PARTICIPANT
}

type EventRule implements Node {
  createdAt: DateTime!
  entityAgreement(entity: UsernameOrID): EventRuleAgreement
  event: Event!
  id: ID!
  text: String!
}

type EventRuleAgreement implements Node {
  createdAt: DateTime!
  entity: Entity!
  eventRule: EventRule!
  id: ID!
}

type EventRuleAgreementConnection {
  """A list of edges."""
  edges: [EventRuleAgreementEdge!]!
  """A list of nodes."""
  nodes: [EventRuleAgreement!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type EventRuleAgreementEdge {
  """A cursor for use in pagination"""
  cursor: String!
  """The item at the end of the edge"""
  node: EventRuleAgreement!
}

type EventRuleConnection {
  """A list of edges."""
  edges: [EventRuleEdge!]!
  """A list of nodes."""
  nodes: [EventRule!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type EventRuleEdge {
  """A cursor for use in pagination"""
  cursor: String!
  """The item at the end of the edge"""
  node: EventRule!
}

type FileBrowser {
  readDir(after: String, first: Int, path: String): FileBrowserEntryConnection!
  readMeta(path: String): FileBrowserEntry
}

type FileBrowserDirectoryEntry implements FileBrowserEntry {
  kind: FileBrowserEntryKind!
  name: String!
}

interface FileBrowserEntry {
  kind: FileBrowserEntryKind!
  name: String!
}

type FileBrowserEntryConnection {
  """A list of edges."""
  edges: [FileBrowserEntryEdge!]!
  """A list of nodes."""
  nodes: [FileBrowserEntry!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type FileBrowserEntryEdge {
  """A cursor for use in pagination"""
  cursor: String!
  """The item at the end of the edge"""
  node: FileBrowserEntry!
}

enum FileBrowserEntryKind {
  DIRECTORY
  FILE
}

type FileBrowserFileEntry implements FileBrowserEntry {
  contentLength: Int!
  contentType: String!
  downloadUrl: Url!
  kind: FileBrowserEntryKind!
  mode: Int!
  name: String!
}

type FinishUploadFile {
  downloadUrl: Url!
}

input FinishUploadFileInput {
  key: String!
}

type Forum implements ForumOwner & Node & Subscribable {
  createdAt: DateTime!
  entitySubscription(entity: UsernameOrID): SubjectSubscription
  forum: Forum!
  guidelines: String
  icon: Url
  id: ID!
  orderingPriority: Int!
  owner: ForumOwner!
  ownerKind: ForumOwnerKind!
  shortDescription: String!
  slug: String!
  title: String!
  topics(after: String, before: String, first: Int, last: Int, order: VotableOrder): TopicConnection!
  viewerCan(action: Action!, asEntity: UsernameOrID): Boolean!
}

type ForumConnection {
  """A list of edges."""
  edges: [ForumEdge!]!
  """A list of nodes."""
  nodes: [Forum!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type ForumEdge {
  """A cursor for use in pagination"""
  cursor: String!
  """The item at the end of the edge"""
  node: Forum!
}

interface ForumOwner {
  forum: Forum!
  id: ID!
  slug: String!
  viewerCan(action: Action!, asEntity: UsernameOrID): Boolean!
}

enum ForumOwnerKind {
  COMPETITION
  EVENT
  TOP_LEVEL
}

type ForumSubscription implements Node & SubjectSubscription {
  createdAt: DateTime!
  entity: Entity!
  forum: Forum!
  id: ID!
  kind: SubjectKind!
  subject: Subscribable!
  viewerCan(action: Action!, asEntity: UsernameOrID): Boolean!
}

type GlobalLeaderboardConnection {
  """A list of edges."""
  edges: [GlobalLeaderboardEdge!]!
  """A list of nodes."""
  nodes: [Entity!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type GlobalLeaderboardEdge {
  """A cursor for use in pagination"""
  cursor: String!
  """The item at the end of the edge"""
  node: Entity!
  points: Int!
  rank: Int!
}

type InitUploadFile {
  key: String!
  uploadUrl: Url!
}

input InitUploadFileInput {
  contentLength: Int!
  contentType: String!
  filename: String!
}

"""A scalar that can represent any JSON value."""
scalar JSON

input LoginUserInput {
  password: String!
  usernameOrEmail: String!
}

type Mutation {
  acceptEventInvite(asEntity: UsernameOrID, code: String!, id: ID!): EventInvite!
  addCompetitionMember(competitionId: ID!, entityId: ID!): CompetitionMembershipEdge!
  addEventCompetition(competitionId: ID!, eventId: ID!): EventCompetitionEdge!
  addEventMember(entityId: ID!, eventId: ID!): EventMembershipEdge!
  agreeToCompetitionRule(asEntity: UsernameOrID, competition: ID!): CompetitionRuleAgreement!
  agreeToEventRule(asEntity: UsernameOrID, event: ID!): EventRuleAgreement!
  awardBadge(badge: Badge!, entityId: ID!): EntityBadgeEdge!
  completeProjectVersionFileMultipartUpload(eTags: [String!]!, id: ID!, uploadId: String!): ProjectVersionFile!
  createCommentForComment(commentId: ID!, input: CreateCommentInput!): CommentEdge!
  createCommentForTopic(input: CreateCommentInput!, topicId: ID!): CommentEdge!
  createCompetition(input: CreateCompetitionInput!): CompetitionEdge!
  createEvent(input: CreateEventInput!): EventEdge!
  createForum(input: CreateForumInput!): ForumEdge!
  createOrganization(input: CreateOrganizationInput!): OrganizationEdge!
  createPasswordReset(input: CreatePasswordResetInput!): Boolean!
  createProjectVersionApproval(projectVersionId: ID!): ProjectVersionApprovalEdge!
  createProjectVersionFileMultipartUpload(chunks: [Int!]!, contentType: String, id: ID!): CreateMultipartUploadResponse!
  createSubmissionVersion(asEntity: UsernameOrID, competitionId: ID!, input: UpdateSubmissionInput!): ProjectVersionEdge!
  createTag(entityId: ID!, input: CreateTagInput!): TagEdge!
  createTopic(forumId: ID!, input: CreateTopicInput!): TopicEdge!
  createUseCaseVersion(competitionId: ID!, input: UpdateUseCaseInput!): ProjectVersionEdge!
  deleteComment(id: ID!): ID!
  deleteCompetition(id: ID!): ID!
  deleteEvent(id: ID!): ID!
  deleteForum(id: ID!): ID!
  deleteOrganization(id: ID!): ID!
  deleteProjectVersionApproval(projectVersionApprovalId: ID!): ID!
  deleteTag(tagId: ID!): ID!
  deleteTopic(id: ID!): ID!
  deleteUser(id: ID!): ID!
  fetchWebsiteMetadata(url: Url!): WebsiteMetadata!
  finishUploadFile(input: FinishUploadFileInput!): FinishUploadFile!
  generateEventInviteCode(id: ID!): EventInvite!
  initUploadFile(input: InitUploadFileInput!): InitUploadFile!
  inviteEventMembers(eventId: ID!, invites: [EventMemberInvite!]!): Event!
  joinCompetition(asEntity: UsernameOrID, competitionId: ID!): CompetitionMembershipEdge!
  joinEvent(asEntity: UsernameOrID, eventId: ID!): EventMembershipEdge!
  loginUser(input: LoginUserInput!): UserEdge!
  logoutUser: Boolean!
  oauth2Authorize(input: Oauth2AuthorizeInput!): Oauth2AuthorizeOutput!
  oauth2Refresh(input: Oauth2RefreshInput!): Oauth2TokenOutput!
  oauth2Token(input: Oauth2TokenInput!): Oauth2TokenOutput!
  publishVote(id: ID!, kind: VoteKind!): VotableEdge!
  removeCompetitionMember(id: ID!): ID!
  removeEventCompetition(id: ID!): ID!
  removeEventInviteCode(id: ID!): EventInvite!
  removeEventMember(id: ID!): ID!
  removeOrganizationMember(id: ID!): ID!
  resetPassword(input: ResetPasswordInput!): Boolean!
  resetVote(id: ID!): VotableEdge!
  setCompetitionOrderingPriority(id: ID!, priority: Int!): CompetitionEdge!
  setUserNotificationSubscription(notification: NotificationKind!, subscribe: Boolean!): UserEdge!
  signupUser(input: SignupUserInput!): UserEdge!
  subscribeToSubject(asEntity: UsernameOrID, subject: ID!): SubjectSubscriptionEdge!
  transferCompetitionOwnership(competitionId: ID!, toEntityId: ID!): [CompetitionMembershipEdge!]!
  transferEventOwnership(eventId: ID!, toEntityId: ID!): [EventMembershipEdge!]!
  transferOrganizationOwnership(organizationId: ID!, toUserId: ID!): [OrganizationMembershipEdge!]!
  unsubscribeFromAllNotifications: UserEdge!
  unsubscribeFromSubject(subscription: ID!): ID!
  unsubscribeNotificationForToken(token: String!): NotificationKind
  updateComment(id: ID!, input: UpdateCommentInput!): CommentEdge!
  updateCompetition(id: ID!, input: UpdateCompetitionInput!): CompetitionEdge!
  updateEvent(id: ID!, input: UpdateEventInput!): EventEdge!
  updateEventAgenda(eventId: ID!, input: UpdateAgendaInput!): EventEdge!
  updateForum(id: ID!, input: UpdateForumInput!): ForumEdge!
  updateOrganization(id: ID!, input: UpdateOrganizationInput!): OrganizationEdge!
  updateOrganizationMembership(kind: OrganizationMembershipKind!, organizationId: ID!, userId: ID!): OrganizationMembershipEdge!
  updateTopic(id: ID!, input: UpdateTopicInput!): Topic!
  updateUser(id: ID!, input: UpdateUserInput!): UserEdge!
  validateSubmissionVersion(projectVersionId: ID!): ProjectVersionEdge!
  validateUseCaseVersion(projectVersionId: ID!): ProjectVersionEdge!
  withdrawBadge(id: ID!): ID!
}

"""
ISO 8601 calendar date without timezone.
Format: %Y-%m-%d

# Examples

* `1994-11-13`
* `2000-02-24`
"""
scalar NaiveDate

interface Node {
  id: ID!
}

enum NotificationKind {
  AWARD_BADGE
  CONTENT_MENTIONED
  CREATE_SUBMISSION
  CREATE_TOPIC
  PROMOTIONAL_NEWSLETTER
  REPLY_COMMENT
  REPLY_TOPIC
}

input Oauth2AuthorizeInput {
  clientId: String!
  redirectUri: Url
  state: String
}

type Oauth2AuthorizeOutput {
  clientError: Boolean!
  redirectUri: Url
  unauthorized: Boolean!
}

input Oauth2RefreshInput {
  clientId: String!
  refreshToken: String!
}

type Oauth2Token {
  accessToken: String!
  expiresIn: Int!
  refreshToken: String!
  scope: String!
}

input Oauth2TokenInput {
  clientId: String!
  code: String!
  redirectUri: Url!
}

type Oauth2TokenOutput {
  clientError: Boolean!
  issued: Oauth2Token
  unauthorized: Boolean!
}

type Organization implements Entity & Node {
  badges(after: String, before: String, first: Int, last: Int): EntityBadgeConnection!
  bio: String
  createdAt: DateTime!
  displayName: String!
  github: String
  id: ID!
  image: Url
  imageThumbnail: Url
  kind: EntityKind!
  linkedin: String
  location: String
  points: Int!
  projectVersionApprovals(after: String, before: String, first: Int, last: Int, projectVersionId: UUID): ProjectVersionApprovalConnection!
  rank: Int!
  subjectSubscriptions(after: String, before: String, first: Int, kinds: [SubjectKind!], last: Int): SubjectSubscriptionConnection!
  submissions(after: String, before: String, competitionId: ID, first: Int, last: Int): SubmissionConnection!
  userMembership(user: UsernameOrID): OrganizationMembership
  username: String!
  users(after: String, before: String, first: Int, last: Int): OrganizationUserConnection!
  viewerCan(action: Action!, asEntity: UsernameOrID): Boolean!
  website: String
}

type OrganizationConnection {
  """A list of edges."""
  edges: [OrganizationEdge!]!
  """A list of nodes."""
  nodes: [Organization!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type OrganizationEdge {
  """A cursor for use in pagination"""
  cursor: String!
  """The item at the end of the edge"""
  node: Organization!
}

type OrganizationMembership implements Node {
  id: ID!
  kind: OrganizationMembershipKind!
  organization: Organization!
  user: User!
  viewerCan(action: Action!, asEntity: UsernameOrID): Boolean!
}

"""An edge in a connection."""
type OrganizationMembershipEdge {
  """A cursor for use in pagination"""
  cursor: String!
  """The item at the end of the edge"""
  node: OrganizationMembership!
}

enum OrganizationMembershipKind {
  ADMIN
  EDITOR
  OWNER
  READER
}

type OrganizationUserConnection {
  """A list of edges."""
  edges: [OrganizationMembershipEdge!]!
  """A list of nodes."""
  nodes: [OrganizationMembership!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Information about pagination in a connection"""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

input Permission {
  actingAs: UsernameOrID
  on: ID
  to: Action!
}

interface Project {
  competition: Competition!
  id: ID!
  latest: ProjectVersion
  name: String!
  version(version: Semver): ProjectVersion
  versions(after: String, before: String, first: Int, last: Int): ProjectVersionConnection!
  viewerCan(action: Action!, asEntity: UsernameOrID): Boolean!
}

type ProjectVersion implements Node {
  approval(entity: UsernameOrID): ProjectVersionApproval
  approvals(after: String, before: String, first: Int, last: Int): ProjectVersionApprovalConnection!
  createdAt: DateTime!
  entity: Entity!
  evaluation: ProjectVersionEvaluation
  fileByKind(kind: ProjectVersionFileKind!): ProjectVersionFile
  files: [ProjectVersionFile!]!
  id: ID!
  latest: Boolean!
  project: Project!
  pyprojectToml: String!
  pythonRequires: String
  readme: String
  status: ProjectVersionStatus!
  validatedAt: DateTime
  version: Semver!
  viewerCan(action: Action!, asEntity: UsernameOrID): Boolean!
}

type ProjectVersionApproval implements Node {
  createdAt: DateTime!
  entity: Entity!
  id: ID!
  projectVersion: ProjectVersion!
  viewerCan(action: Action!, asEntity: UsernameOrID): Boolean!
}

type ProjectVersionApprovalConnection {
  """A list of edges."""
  edges: [ProjectVersionApprovalEdge!]!
  """A list of nodes."""
  nodes: [ProjectVersionApproval!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type ProjectVersionApprovalEdge {
  """A cursor for use in pagination"""
  cursor: String!
  """The item at the end of the edge"""
  node: ProjectVersionApproval!
}

enum ProjectVersionCompressor {
  GZIP
  ZSTANDARD
}

type ProjectVersionConnection {
  """A list of edges."""
  edges: [ProjectVersionEdge!]!
  """A list of nodes."""
  nodes: [ProjectVersion!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type ProjectVersionEdge {
  """A cursor for use in pagination"""
  cursor: String!
  """The item at the end of the edge"""
  node: ProjectVersion!
}

type ProjectVersionEvaluation implements Node {
  createdAt: DateTime!
  error: String
  finalizedAt: DateTime
  id: ID!
  latest: Boolean!
  max: Boolean!
  points: Int!
  projectVersion: ProjectVersion!
  rank: Int
  score: Float
  submission: Submission!
  viewerCan(action: Action!, asEntity: UsernameOrID): Boolean!
}

type ProjectVersionEvaluationConnection {
  """A list of edges."""
  edges: [ProjectVersionEvaluationEdge!]!
  """A list of nodes."""
  nodes: [ProjectVersionEvaluation!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type ProjectVersionEvaluationEdge {
  """A cursor for use in pagination"""
  cursor: String!
  """The item at the end of the edge"""
  node: ProjectVersionEvaluation!
}

type ProjectVersionFile implements Node {
  browse: FileBrowser!
  downloadUrl(archKind: ArchiveKind! = TAR): Url!
  extension: String
  id: ID!
  kind: ProjectVersionFileKind!
  projectVersion: ProjectVersion!
  uploadUrl: Url
  viewerCan(action: Action!, asEntity: UsernameOrID): Boolean!
}

enum ProjectVersionFileKind {
  DATA
  PACKAGE
  SUBMISSION_EVALUATION
  TEMPLATE
}

enum ProjectVersionStatus {
  AWAITING_APPROVAL
  AWAITING_EVALUATION
  AWAITING_VALIDATION
  ERROR
  OK
}

type Query {
  competitionBySlug(slug: String!): Competition
  competitions(after: String, before: String, first: Int, last: Int, search: String): CompetitionConnection!
  entities(after: String, before: String, first: Int, kinds: [EntityKind!], last: Int, search: String): EntityConnection!
  entityByUsername(username: String!): Entity
  eventBySlug(slug: String!): Event
  events(after: String, before: String, first: Int, last: Int, search: String): EventConnection!
  forumBySlug(slug: String!): Forum
  forums(after: String, before: String, first: Int, last: Int, search: String): ForumConnection!
  leaderboard(after: String, before: String, first: Int, kinds: [EntityKind!], last: Int, search: String): GlobalLeaderboardConnection!
  node(id: ID!): Node!
  tags(after: String, before: String, first: Int, last: Int): TagConnection!
  version: Version!
  viewer: User!
}

input ResetPasswordInput {
  password: String!
  secret: String!
}

scalar Semver

input SignupUserInput {
  bio: String
  displayName: String!
  email: String!
  github: String
  image: Upload
  linkedin: String
  location: String
  password: String!
  subscribePromotionalNewsletter: Boolean
  username: String!
  website: Url
}

enum SubjectKind {
  FORUM
  TOPIC
}

interface SubjectSubscription {
  createdAt: DateTime!
  entity: Entity!
  id: ID!
  kind: SubjectKind!
  subject: Subscribable!
  viewerCan(action: Action!, asEntity: UsernameOrID): Boolean!
}

type SubjectSubscriptionConnection {
  """A list of edges."""
  edges: [SubjectSubscriptionEdge!]!
  """A list of nodes."""
  nodes: [SubjectSubscription!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type SubjectSubscriptionEdge {
  """A cursor for use in pagination"""
  cursor: String!
  """The item at the end of the edge"""
  node: SubjectSubscription!
}

type Submission implements Node & Project {
  competition: Competition!
  entity: Entity!
  id: ID!
  latest: ProjectVersion
  maxEvaluation: ProjectVersionEvaluation
  name: String!
  version(version: Semver): ProjectVersion
  versions(after: String, before: String, first: Int, last: Int): ProjectVersionConnection!
  viewerCan(action: Action!, asEntity: UsernameOrID): Boolean!
}

type SubmissionConnection {
  """A list of edges."""
  edges: [SubmissionEdge!]!
  """A list of nodes."""
  nodes: [Submission!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type SubmissionEdge {
  """A cursor for use in pagination"""
  cursor: String!
  """The item at the end of the edge"""
  node: Submission!
}

interface Subscribable {
  entitySubscription(entity: UsernameOrID): SubjectSubscription
  id: ID!
  viewerCan(action: Action!, asEntity: UsernameOrID): Boolean!
}

type Subscription {
  deletedComments(topicId: ID): DeletedComment!
  newComments(topicId: ID): CommentEdge!
  projectVersionStatusUpdate(competitionId: ID, entityId: ID, projectId: ID, projectVersionId: ID): ProjectVersion!
  updatedComments(topicId: ID): CommentEdge!
  updatedEntity(id: ID): Entity!
}

type Tag implements Node {
  id: ID!
  name: String!
  viewerCan(action: Action!, asEntity: UsernameOrID): Boolean!
}

type TagConnection {
  """A list of edges."""
  edges: [TagEdge!]!
  """A list of nodes."""
  nodes: [Tag!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type TagEdge {
  """A cursor for use in pagination"""
  cursor: String!
  """The item at the end of the edge"""
  node: Tag!
}

type Topic implements Node & Subscribable & Votable {
  author: Entity!
  commentCount: Int!
  comments(after: String, before: String, first: Int, last: Int, order: VotableOrder): CommentConnection!
  createdAt: DateTime!
  description: String
  entitySubscription(entity: UsernameOrID): SubjectSubscription
  forum: Forum!
  id: ID!
  title: String!
  url: String
  viewerCan(action: Action!, asEntity: UsernameOrID): Boolean!
  voted: EntityVote
  votes: Int!
}

type TopicConnection {
  """A list of edges."""
  edges: [TopicEdge!]!
  """A list of nodes."""
  nodes: [Topic!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type TopicEdge {
  """A cursor for use in pagination"""
  cursor: String!
  hotness: Float!
  """The item at the end of the edge"""
  node: Topic!
}

type TopicSubscription implements Node & SubjectSubscription {
  createdAt: DateTime!
  entity: Entity!
  id: ID!
  kind: SubjectKind!
  subject: Subscribable!
  topic: Topic!
  viewerCan(action: Action!, asEntity: UsernameOrID): Boolean!
}

"""
A UUID is a unique 128-bit number, stored as 16 octets. UUIDs are parsed as
Strings within GraphQL. UUIDs are used to assign unique identifiers to
entities without requiring a central allocating authority.

# References

* [Wikipedia: Universally Unique Identifier](http://en.wikipedia.org/wiki/Universally_unique_identifier)
* [RFC4122: A Universally Unique IDentifier (UUID) URN Namespace](http://tools.ietf.org/html/rfc4122)
"""
scalar UUID

input UpdateAgendaInput {
  agenda: JSON
}

input UpdateCommentInput {
  content: String!
}

input UpdateCompetitionInput {
  banner: Upload
  description: String
  grantHostSubmissionAccess: Boolean
  hasLeaderboard: Boolean
  requiresApproval: Boolean
  rules: String
  shortDescription: String
  slug: String
  tagIds: [ID]
  thumbnail: Upload
  title: String
  visibility: ActivityVisibility
}

input UpdateEventInput {
  banner: Upload
  description: String
  rules: String
  shortDescription: String
  slug: String
  thumbnail: Upload
  title: String
  visibility: ActivityVisibility
}

input UpdateForumInput {
  description: String
  guidelines: String
  icon: Upload
  orderingPriority: Int
  shortDescription: String
  slug: String
  title: String
}

input UpdateOrganizationInput {
  bio: String
  displayName: String
  github: String
  image: Upload
  inQuantumJob: Boolean
  linkedin: String
  location: String
  username: String
  website: Url
}

input UpdateSubmissionInput {
  compression: ProjectVersionCompressor
  pyprojectToml: String!
  readme: String
}

input UpdateTopicInput {
  description: String
  title: String
}

input UpdateUseCaseInput {
  compression: ProjectVersionCompressor
  pyprojectToml: String!
  readme: String
}

input UpdateUserInput {
  bio: String
  displayName: String
  email: String
  github: String
  image: Upload
  inQuantumJob: Boolean
  jobTitle: String
  linkedin: String
  location: String
  oldPassword: String
  organization: String
  password: String
  username: String
  website: Url
}

scalar Upload

"""URL is a String implementing the [URL Standard](http://url.spec.whatwg.org/)"""
scalar Url

type UseCase implements Node & Project {
  competition: Competition!
  id: ID!
  latest: ProjectVersion
  name: String!
  version(version: Semver): ProjectVersion
  versions(after: String, before: String, first: Int, last: Int): ProjectVersionConnection!
  viewerCan(action: Action!, asEntity: UsernameOrID): Boolean!
}

type User implements Entity & Node {
  activities(after: String, before: String, first: Int, kinds: [EntityActivitiesConnectionKind!], last: Int): ActivityConnection!
  badges(after: String, before: String, first: Int, last: Int): EntityBadgeConnection!
  bio: String
  """can this user perform the action on the given resource"""
  can(actingAs: UsernameOrID, action: Action!, on: ID): Boolean!
  comments(after: String, before: String, first: Int, last: Int, order: VotableOrder): CommentConnection!
  createdAt: DateTime!
  displayName: String!
  email: String!
  entities(after: String, before: String, first: Int, last: Int, permission: Permission, search: String): UserEntitiesConnection!
  github: String
  id: ID!
  image: Url
  imageThumbnail: Url
  isAvailableOnQuantumJobs: Boolean!
  jobBoardProfileLink: Url
  jobTitle: String
  karma: Int!
  kind: EntityKind!
  linkedin: String
  location: String
  notifications: UserNotifications!
  organization: String
  organizations(after: String, before: String, first: Int, last: Int): UserOrganizationConnection!
  points: Int!
  projectVersionApprovals(after: String, before: String, first: Int, last: Int, projectVersionId: UUID): ProjectVersionApprovalConnection!
  rank: Int!
  subjectSubscriptions(after: String, before: String, first: Int, kinds: [SubjectKind!], last: Int): SubjectSubscriptionConnection!
  submissions(after: String, before: String, competitionId: ID, first: Int, last: Int): SubmissionConnection!
  topics(after: String, before: String, first: Int, last: Int, order: VotableOrder): TopicConnection!
  username: String!
  viewerCan(action: Action!, asEntity: UsernameOrID): Boolean!
  website: String
}

"""An edge in a connection."""
type UserEdge {
  """A cursor for use in pagination"""
  cursor: String!
  """The item at the end of the edge"""
  node: User!
}

type UserEntitiesConnection {
  """A list of edges."""
  edges: [EntityEdge!]!
  """A list of nodes."""
  nodes: [Entity!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type UserNotifications {
  disabled: [NotificationKind!]!
  enabled: [NotificationKind!]!
}

type UserOrganizationConnection {
  """A list of edges."""
  edges: [OrganizationMembershipEdge!]!
  """A list of nodes."""
  nodes: [OrganizationMembership!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

scalar UsernameOrID

type Version {
  current: String!
  gitCommit: String
}

interface Votable {
  id: ID!
  viewerCan(action: Action!, asEntity: UsernameOrID): Boolean!
  voted: EntityVote
  votes: Int!
}

"""An edge in a connection."""
type VotableEdge {
  """A cursor for use in pagination"""
  cursor: String!
  """The item at the end of the edge"""
  node: Votable!
}

enum VotableOrder {
  HOT
  NEWEST
  OLDEST
}

enum VoteKind {
  DOWNVOTE
  UPVOTE
}

type WebsiteMetadata {
  description: String
  title: String
}
